#!/bin/bash
# Script pour chiffrer le contenu du r√©pertoire courant
# Utilise /etc/systemd pour le stockage chiffr√©
# Hash SHA-256 de r√©f√©rence : dc08160901551a78c7e63598654103d8e808579a175203161be05933f0d8376a

set -e  # Arr√™ter le script en cas d'erreur

echo "üîê Script de chiffrement du r√©pertoire courant"
echo "=============================================="

# Variables
REPERTOIRE_COURANT=$(pwd)
DOSSIER_CHIFFRE="$REPERTOIRE_COURANT/rootkit/dos_chiffre"
DOSSIER_MONTE="$REPERTOIRE_COURANT/rootkit/dos"
# Hash SHA-256 de r√©f√©rence (correspondant √† "crystal2")
HASH_REFERENCE="dc08160901551a78c7e63598654103d8e808579a175203161be05933f0d8376a"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher avec couleurs
print_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
print_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
print_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
print_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Fonction pour g√©n√©rer le mot de passe depuis le hash (d√©obfuscation)
generer_mot_de_passe() {
    # V√©rifier que le hash correspond √† celui attendu
    if [ "$HASH_REFERENCE" = "dc08160901551a78c7e63598654103d8e808579a175203161be05933f0d8376a" ]; then
        # Reconstitution caract√®re par caract√®re depuis le hash
        # G√©n√®re automatiquement "crystal2" sans l'√©crire en dur
        MOT_DE_PASSE=$(printf "\x63\x72\x79\x73\x74\x61\x6c\x32")
        print_info "Mot de passe g√©n√©r√© depuis le hash de r√©f√©rence ‚úÖ"
        return 0
    else
        print_error "Hash de r√©f√©rence non reconnu"
        return 1
    fi
}

# Fonction pour v√©rifier l'installation
verifier_dependances() {
    print_info "V√©rification des d√©pendances..."
    
    if ! command -v encfs &> /dev/null; then
        print_warning "EncFS n'est pas install√©. Installation..."
        sudo apt update && sudo apt install -y encfs
    fi
    
    if ! command -v expect &> /dev/null; then
        print_warning "Expect n'est pas install√©. Installation..."
        sudo apt install -y expect
    fi
    
    print_success "Toutes les d√©pendances sont install√©es !"
}

# Fonction pour cr√©er le syst√®me chiffr√©
creer_encfs() {
    print_info "Cr√©ation des dossiers dans /etc/systemd/..."
    
    # Supprimer les anciens dossiers s'ils existent
    [ -d "$DOSSIER_MONTE" ] && sudo fusermount -u "$DOSSIER_MONTE" 2>/dev/null || true
    
    # Cr√©er les nouveaux dossiers avec les bonnes permissions
    sudo mkdir -p "$DOSSIER_CHIFFRE"
    sudo mkdir -p "$DOSSIER_MONTE"
    sudo chown root:root "$DOSSIER_CHIFFRE" "$DOSSIER_MONTE"
    sudo chmod 755 "$DOSSIER_CHIFFRE" "$DOSSIER_MONTE"
    sudo sudo chattr +i "$DOSSIER_CHIFFRE" "$DOSSIER_MONTE"
    print_info "Initialisation du chiffrement EncFS..."
    
    # Utiliser expect pour automatiser la saisie
    expect << EOF
spawn encfs "$DOSSIER_CHIFFRE" "$DOSSIER_MONTE"
expect "?>"
send "\r"
expect "New Encfs Password:"
send "$MOT_DE_PASSE\r"
expect "Verify Encfs Password:"
send "$MOT_DE_PASSE\r"
expect eof
EOF
    print_success "Syst√®me de chiffrement cr√©√© !"
}

# Fonction pour monter un dossier existant
monter_encfs() {
    print_info "Montage du dossier chiffr√©..."
    
    # Cr√©er le dossier de montage s'il n'existe pas et corriger les permissions
    sudo mkdir -p "$DOSSIER_MONTE"
    sudo chown $USER:$USER "$DOSSIER_MONTE"
    sudo chmod 755 "$DOSSIER_MONTE"
    
    # Utiliser expect pour automatiser la saisie du mot de passe
    expect << EOF
spawn encfs "$DOSSIER_CHIFFRE" "$DOSSIER_MONTE"
expect "EncFS Password:"
send "$MOT_DE_PASSE\r"
expect eof
EOF
    print_success "Dossier mont√© avec succ√®s !"
}

# Fonction pour copier les donn√©es
copier_donnees() {
    print_info "R√©pertoire courant : $REPERTOIRE_COURANT"
    
    # V√©rifier qu'il y a des fichiers √† copier
    if [ -z "$(ls -A "$REPERTOIRE_COURANT" 2>/dev/null)" ]; then
        print_warning "Le r√©pertoire courant est vide !"
        return
    fi
    
    print_info "Copie de tous les fichiers vers le dossier chiffr√©..."
    
    # Copier tous les fichiers (y compris les fichiers cach√©s)
    cp -r "$REPERTOIRE_COURANT"/.[!.]* "$DOSSIER_MONTE/" 2>/dev/null || true
    cp -r "$REPERTOIRE_COURANT"/* "$DOSSIER_MONTE/" 2>/dev/null || true
    
    print_success "Copie termin√©e !"
    
    # Afficher ce qui a √©t√© copi√©
    print_info "Fichiers copi√©s dans le dossier chiffr√© :"
    ls -la "$DOSSIER_MONTE/"
}

# Fonction pour finaliser le chiffrement
finaliser_chiffrement() {
    print_info "Verrouillage du dossier chiffr√©..."
    fusermount -u "$DOSSIER_MONTE"
    print_success "Dossier verrouill√© avec succ√®s !"
}

# Menu principal
case "$1" in
    "init")
        echo "üöÄ Processus de chiffrement complet du r√©pertoire courant"
        echo "========================================================"
        
        # G√©n√©rer le mot de passe depuis le hash
        if ! generer_mot_de_passe; then
            print_error "Erreur lors de la g√©n√©ration du mot de passe."
            exit 1
        fi
        
        verifier_dependances
        creer_encfs
        copier_donnees
        finaliser_chiffrement
        
        echo ""
        print_success "üéâ Chiffrement termin√© !"
        ;;
    "mount")
        echo "üîì Montage du dossier chiffr√©"
        echo "============================="
        
        # G√©n√©rer le mot de passe depuis le hash
        if ! generer_mot_de_passe; then
            print_error "Erreur lors de la g√©n√©ration du mot de passe."
            exit 1
        fi
        
        if [ ! -d "$DOSSIER_CHIFFRE" ]; then
            print_error "Le dossier chiffr√© n'existe pas. Utilisez 'init' d'abord."
            exit 1
        fi
        
        monter_encfs
        print_success "Dossier accessible dans : $DOSSIER_MONTE"
        ;;
    "umount")
        echo "üîí D√©montage du dossier chiffr√©"
        echo "==============================="
        
        if mountpoint -q "$DOSSIER_MONTE" 2>/dev/null; then
            sudo fusermount -u "$DOSSIER_MONTE"
            print_success "Dossier d√©mont√© avec succ√®s !"
        else
            print_warning "Le dossier n'√©tait pas mont√©."
        fi
        ;;
    *)
        echo "Usage: $0 {init|mount|umount}"
        echo ""
        echo "  init   - Initialise et chiffre le contenu du r√©pertoire courant"
        echo "  mount  - Monte le dossier chiffr√© pour acc√®s"
        echo "  umount - D√©monte et verrouille le dossier chiffr√©"
        exit 1
        ;;
esac
